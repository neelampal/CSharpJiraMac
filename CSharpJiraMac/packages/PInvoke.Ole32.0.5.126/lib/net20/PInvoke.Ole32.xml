<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PInvoke.Ole32</name>
    </assembly>
    <members>
        <member name="T:PInvoke.Ole32">
            <summary>
            Exported functions from the Ole32.dll Windows library
            that are available to Desktop and Store apps.
            </summary>
            <content>
            Methods and nested types that are not strictly P/Invokes but provide
            a slightly higher level of functionality to ease calling into native code.
            </content>
            <summary>
            Exported functions from the Ole32.dll Windows library
            that are available to Desktop and Store apps.
            </summary>
            <content>
            Methods and nested types that are not strictly P/Invokes but provide
            a slightly higher level of functionality to ease calling into native code.
            </content>
        </member>
        <member name="M:PInvoke.Ole32.CoEnableCallCancellation(System.Void*)">
            <summary>
            Enables cancellation of synchronous calls on the calling thread.
            </summary>
            <param name="pReserved">This parameter is reserved and must be NULL (<see cref="F:System.IntPtr.Zero"/>)</param>
            <returns>This function can return the standard return values <see cref="F:PInvoke.HResult.Code.S_OK"/>, <see cref="F:PInvoke.HResult.Code.E_FAIL"/>, <see cref="F:PInvoke.HResult.Code.E_INVALIDARG"/>, and <see cref="F:PInvoke.HResult.Code.E_OUTOFMEMORY"/>.</returns>
        </member>
        <member name="M:PInvoke.Ole32.CoDisableCallCancellation(System.Void*)">
            <summary>
            Undoes the action of a call to <see cref="M:PInvoke.Ole32.CoEnableCallCancellation(System.IntPtr)"/>. Disables cancellation of synchronous calls on the calling thread when all calls to CoEnableCallCancellation are balanced by calls to CoDisableCallCancellation.
            </summary>
            <param name="pReserved">This parameter is reserved and must be NULL (<see cref="F:System.IntPtr.Zero"/>)</param>
            <returns>This function can return the standard return values E_FAIL, E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.
            <list type="table">
                <listheader>
                    <term>Return code</term>
                    <term>Description</term>
                </listheader>
                <item>
                    <term><c><see cref="F:PInvoke.HResult.Code.S_OK"/></c></term>
                    <term>Call cancellation was successfully disabled on the thread.</term>
                </item>
                <item>
                    <term><c><see cref="F:PInvoke.HResult.Code.CO_E_CANCEL_DISABLED"/></c></term>
                    <term>There have been more successful calls to CoEnableCallCancellation on the thread than there have been calls to CoDisableCallCancellation. Cancellation is still enabled on the thread.</term>
                </item>
            </list>
            </returns>
        </member>
        <member name="M:PInvoke.Ole32.CoCancelCall(System.Int32,System.Int32)">
            <summary>
            Requests cancellation of an outbound DCOM method call pending on a specified thread.
            </summary>
            <param name="dwThreadId">The identifier of the thread on which the pending DCOM call is to be canceled. If this parameter is 0, the call is on the current thread.</param>
            <param name="ulTimeout">The number of seconds <see cref="M:PInvoke.Ole32.CoCancelCall(System.Int32,System.Int32)"/> waits for the server to complete the outbound call after the client requests cancellation.</param>
            <returns>This function can return the standard return values E_FAIL, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.
            <list type="table">
                <listheader>
                    <term>Return code</term>
                    <term>Description</term>
                </listheader>
                <item>
                    <term><c><see cref="F:PInvoke.HResult.Code.S_OK"/></c></term>
                    <term>The cancellation request was made.</term>
                </item>
                <item>
                    <term><c><see cref="F:PInvoke.HResult.Code.E_NOINTERFACE"/></c></term>
                    <term><c>There is no cancel object corresponding to the specified thread.</c></term>
                </item>
                <item>
                    <term><c><see cref="F:PInvoke.HResult.Code.CO_E_CANCEL_DISABLED"/></c></term>
                    <term>Call cancellation is not enabled on the specified thread.</term>
                </item>
                <item>
                    <term><c><see cref="F:PInvoke.HResult.Code.RPC_E_CALL_COMPLETE"/></c></term>
                    <term>The call was completed during the timeout interval.</term>
                </item>
                <item>
                    <term><c><see cref="F:PInvoke.HResult.Code.RPC_E_CALL_CANCELED"/></c></term>
                    <term>The call was already canceled.</term>
                </item>
            </list></returns>
            <remarks>
            <paramref name="dwThreadId"/> is the ID of the native thread (typically obtained by
            calling GetCurrentThreadId or GetThreadId functions. This is not the same as the
            managed thread ID returned by <see cref="P:System.Threading.Thread.ManagedThreadId"/>
            </remarks>
        </member>
        <member name="M:PInvoke.Ole32.CoEnableCallCancellation(System.IntPtr)">
            <summary>
            Enables cancellation of synchronous calls on the calling thread.
            </summary>
            <param name = "pReserved">This parameter is reserved and must be NULL (<see cref = "F:System.IntPtr.Zero"/>)</param>
            <returns>This function can return the standard return values <see cref = "F:PInvoke.HResult.Code.S_OK"/>, <see cref = "F:PInvoke.HResult.Code.E_FAIL"/>, <see cref = "F:PInvoke.HResult.Code.E_INVALIDARG"/>, and <see cref = "F:PInvoke.HResult.Code.E_OUTOFMEMORY"/>.</returns>
        </member>
        <member name="M:PInvoke.Ole32.CoDisableCallCancellation(System.IntPtr)">
            <summary>
            Undoes the action of a call to <see cref = "M:PInvoke.Ole32.CoEnableCallCancellation(System.IntPtr)"/>. Disables cancellation of synchronous calls on the calling thread when all calls to CoEnableCallCancellation are balanced by calls to CoDisableCallCancellation.
            </summary>
            <param name = "pReserved">This parameter is reserved and must be NULL (<see cref = "F:System.IntPtr.Zero"/>)</param>
            <returns>This function can return the standard return values E_FAIL, E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.
            <list type = "table">
                <listheader>
                    <term>Return code</term>
                    <term>Description</term>
                </listheader>
                <item>
                    <term><c><see cref = "F:PInvoke.HResult.Code.S_OK"/></c></term>
                    <term>Call cancellation was successfully disabled on the thread.</term>
                </item>
                <item>
                    <term><c><see cref = "F:PInvoke.HResult.Code.CO_E_CANCEL_DISABLED"/></c></term>
                    <term>There have been more successful calls to CoEnableCallCancellation on the thread than there have been calls to CoDisableCallCancellation. Cancellation is still enabled on the thread.</term>
                </item>
            </list>
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
            <summary>
            Allows the C# compiler to target .NET 2.0 while still using extension method syntax.
            </summary>
        </member>
    </members>
</doc>
